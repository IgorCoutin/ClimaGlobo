name: .NET CI/CD Pipeline

on:
  push:
    branches:
      - develop  # Executa o pipeline quando houver push na branch 'develop'
      - master   # Executa o pipeline também quando houver push na branch 'master'
  pull_request:
    branches:
      - develop  # Executa o pipeline em pull requests direcionados para a branch 'develop'
      - master   # Executa o pipeline em pull requests direcionados para a branch 'master'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'  # Definir a versão do .NET 8

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --no-restore --verbosity normal

  publish_docker_image:
    if: github.ref == 'refs/heads/develop'  # Condição: rodar este job apenas na branch develop
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t minimalapi-service:${{ github.sha }} .
        docker tag minimalapi-service:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/minimalapi-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/minimalapi-service:latest

  deploy:
    if: github.ref == 'refs/heads/develop'  # Condição: rodar este job apenas na branch develop
    needs: publish_docker_image
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        docker pull ${{ secrets.DOCKER_USERNAME }}/minimalapi-service:latest
        docker stop minimalapi-service || true
        docker rm minimalapi-service || true
        docker run -d -p 8080:8080 --name minimalapi-service ${{ secrets.DOCKER_USERNAME }}/minimalapi-service:latest
        EOF
